'use strict';

(function () {
    'use strict';

    angular.module('dropApp', ['ui.router', 'dropAppControllers', 'dndLists', 'ngMaterial']).config(function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/');

        $stateProvider.state('/', {
            url: "/",
            templateUrl: "app/partials/dev.html",
            controller: 'dropController'
        }).state('/preview', {
            url: "/preview",
            templateUrl: "app/partials/preview.html",
            controller: 'previewController'
        });
    });
})();
(function () {
    'use strict';

    angular.module('dropAppControllers', []).controller('dropController', dropController).controller('previewController', previewController);

    dropController.$inject = ['$scope', 'storage'];
    previewController.$inject = ['$scope', 'storage', '$state'];

    function dropController($scope, storage) {

        $scope.elements = [];
        $scope.boxes = [];
        $scope.readyToPreview = true;
        $scope.previewChecker = previewChecker;
        $scope.saveItemsState = saveItemsState;

        var boxesAmount = 5;

        getData();
        previewChecker();

        function saveItemsState() {
            storage.setPreviewedItems($scope.boxes);
            storage.setItems($scope.elements);
        }

        function previewChecker() {
            var filtered = $scope.boxes.filter(function (e) {
                return e.length === 0;
            });
            return $scope.readyToPreview = filtered.length !== 0;
        }

        function setBoxes(count) {
            var tempArray = [];
            for (var i = 0; i < count; i++) {
                tempArray[i] = [];
            }
            $scope.boxes = tempArray;
        }

        function getData() {
            var items = storage.getItems();
            var boxes = storage.getPreviewedItems();
            setBoxes(boxesAmount);

            if (items.length > 0 || boxes.length > 0) {
                $scope.elements = items;
                $scope.boxes = boxes;
                return;
            }

            storage.getArticles().then(function (data) {
                return $scope.elements = data;
            });
        }
    }
    function previewController($scope, storage, $state) {
        $scope.boxes = [];

        setBoxes();

        function setBoxes() {
            var boxes = storage.getPreviewedItems();
            boxes.length > 0 ? $scope.boxes = boxes : $state.go('/');
            $scope.boxes = storage.getPreviewedItems();
        }
    }
})();
(function () {})();
(function () {
    'use strict';

    angular.module('dropAppControllers').factory('storage', storage);

    storage.$inject = ['$http'];

    function storage($http) {

        var services = {
            items: [],
            previewedItems: [],
            getArticles: getArticles,
            setPreviewedItems: setPreviewedItems,
            getPreviewedItems: getPreviewedItems,
            setItems: setItems,
            getItems: getItems
        };

        return services;

        function setPreviewedItems() {
            var previewedItems = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            services.previewedItems = previewedItems;
        }

        function setItems() {
            var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            services.items = items;
        }

        function getPreviewedItems() {
            return services.previewedItems;
        }

        function getItems() {
            return services.items;
        }

        function getArticles() {
            var url = '/articles';
            return $http.get(url).then(function (response) {
                setItems(response.data);
                setPreviewedItems();
                return response.data;
            });
        }
    }
})();
//# sourceMappingURL=data:application/json;base64,
